<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loremipsum Blog</title>
  <icon>https://www.gravatar.com/avatar/bcce300a816652e13f1514ef10ae2d8a</icon>
  <subtitle>Things always get worse before they get better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://loremipsumsharp.github.io/"/>
  <updated>2021-02-24T19:13:35.114Z</updated>
  <id>https://loremipsumsharp.github.io/</id>
  
  <author>
    <name>Loremipsum</name>
    <email>mvclogic@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何Swashbuckle可以动态的增加EndPoint</title>
    <link href="https://loremipsumsharp.github.io/2020/12/23/%E5%A6%82%E4%BD%95Swashbuckle%E5%8F%AF%E4%BB%A5%E5%8A%A8%E6%80%81%E7%9A%84%E5%A2%9E%E5%8A%A0EndPoint/"/>
    <id>https://loremipsumsharp.github.io/2020/12/23/%E5%A6%82%E4%BD%95Swashbuckle%E5%8F%AF%E4%BB%A5%E5%8A%A8%E6%80%81%E7%9A%84%E5%A2%9E%E5%8A%A0EndPoint/</id>
    <published>2020-12-23T05:40:09.000Z</published>
    <updated>2021-02-24T19:13:35.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>不得不说<a href="https://github.com/Burgyn/MMLib.SwaggerForOcelot" target="_blank" rel="noopener">MMLib.SwaggerForOcelot</a>这个Ocelot Swagger插件是真的好用，可以很方便的集成下游服务的swagger.json到网关之中，极大的简化了客户端的调试工作。但是这个插件有一个致命的缺陷，那就是无法动态的支持下游结点。也就是说如果下游增加一个新的结点，如果你想把这个结点swagger带出来的话，那么就必须重启ocelot。<br><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1093" target="_blank" rel="noopener">这个issue</a>也提到了这个问题，作者大概的意思就是说，没办法实现，要改的东西太多了，那么究竟有没有办法实现这个动态加载swagger的功能呢？答案是有</p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>先回忆一下我们平时我们集成swagger的常见写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;</span><br><span class="line">     services.AddSwaggerGen(c &#x3D;&gt; .....);</span><br><span class="line">&#125;</span><br><span class="line"> public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</span><br><span class="line"> &#123;</span><br><span class="line">       app.UseSwagger();</span><br><span class="line">       app.UseSwaggerUI(options &#x3D;&gt;</span><br><span class="line">       &#123;</span><br><span class="line">          options.SwaggerEndpoint(&quot;&#x2F;swagger&#x2F;v1&#x2F;swagger.json&quot;, &quot;XXX API V1&quot;);</span><br><span class="line">       &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>翻一下Swashbuckle的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static IApplicationBuilder UseSwaggerUI(</span><br><span class="line">         this IApplicationBuilder app,</span><br><span class="line">         Action&lt;SwaggerUIOptions&gt; setupAction &#x3D; null)</span><br><span class="line">     &#123;</span><br><span class="line">         var options &#x3D; new SwaggerUIOptions();</span><br><span class="line">         if (setupAction !&#x3D; null)</span><br><span class="line">         &#123;</span><br><span class="line">             setupAction(options);</span><br><span class="line">         &#125;</span><br><span class="line">         else</span><br><span class="line">         &#123;</span><br><span class="line">             options &#x3D; app.ApplicationServices.GetRequiredService&lt;IOptions&lt;SwaggerUIOptions&gt;&gt;().Value;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         app.UseMiddleware&lt;SwaggerUIMiddleware&gt;(options);</span><br><span class="line"></span><br><span class="line">         return app;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>注意到 SwaggerUIMiddleware的构造函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class SwaggerUIMiddleware</span><br><span class="line">      public SwaggerUIMiddleware(</span><br><span class="line">          RequestDelegate next,</span><br><span class="line">          IHostingEnvironment hostingEnv,</span><br><span class="line">          ILoggerFactory loggerFactory,</span><br><span class="line">          SwaggerUIOptions options)</span><br><span class="line">      &#123;</span><br><span class="line">          _options &#x3D; options ?? new SwaggerUIOptions();</span><br><span class="line"></span><br><span class="line">          _staticFileMiddleware &#x3D; CreateStaticFileMiddleware(next, hostingEnv, loggerFactory, options);</span><br><span class="line"></span><br><span class="line">          _jsonSerializerOptions &#x3D; new JsonSerializerOptions();</span><br><span class="line">          _jsonSerializerOptions.PropertyNamingPolicy &#x3D; JsonNamingPolicy.CamelCase;</span><br><span class="line">          _jsonSerializerOptions.IgnoreNullValues &#x3D; true;</span><br><span class="line">          _jsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase, false));</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>那么无法使用dynamic endpoint的原因很明显，因为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseMiddleware&lt;SwaggerUIMiddleware&gt;(options);</span><br></pre></td></tr></table></figure><p>上面这句话本质上是把这个SwaggerUIMiddleware注册成一个单例，也就是说他的构造函数只会执行一次。那么你后续取到的endpoint必然就是一个“静态”的东西，那么解决这个主要矛盾就行了</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>这里只是阐述思路，具体的实践方法可以自己去尝试：</p><p>首先我们通过一个scope configurer，每一个http请求都会触发swaggeruioptions的重新config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;IConfigureOptions&lt;SwaggerUIOptions&gt;, SwaggerUIOptionsConfigure&gt;();</span><br></pre></td></tr></table></figure><p>这样依赖我们就是让SwaggerUIOptions动态的变化</p><p>然后，我们必须把SwaggerUIMiddleware替换掉，也就是说，我们没必要这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger();</span><br><span class="line">          app.UseSwaggerUI(options &#x3D;&gt;</span><br><span class="line">          &#123;</span><br><span class="line">             options.SwaggerEndpoint(&quot;&#x2F;swagger&#x2F;v1&#x2F;swagger.json&quot;, &quot;XXX API V1&quot;);</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><p>我们可以开发一个新的中间件来替换掉把SwaggerUIMiddleware，eg:RenderSwaggerUI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public class RenderSwaggerUI : IMiddleware</span><br><span class="line"> &#123;</span><br><span class="line">   public RenderSwaggerUI(IWebHostEnvironment hostingEnv,</span><br><span class="line">            ILoggerFactory loggerFactory,</span><br><span class="line">            IOptionsSnapshot&lt;SwaggerUIOptions&gt; swaggerUIOptions,</span><br><span class="line">            IOptionsSnapshot&lt;List&lt;RouteOptions&gt;&gt; routes,</span><br><span class="line">            IOptionsSnapshot&lt;SwaggerForOcelotUIOptions&gt; swaggerForOcelotUIOptions,</span><br><span class="line">            IOptionsSnapshot&lt;List&lt;SwaggerEndPointOptions&gt;&gt; swaggerEndPoints,</span><br><span class="line">            IHttpClientFactory httpClientFactory,</span><br><span class="line">            ISwaggerJsonTransformer swaggerJsonTransformer, ISwaggerServiceDiscoveryProvider swaggerServiceDiscoveryProvider)</span><br><span class="line">        &#123;</span><br><span class="line">            this.hostingEnv &#x3D; hostingEnv;</span><br><span class="line">            this.loggerFactory &#x3D; loggerFactory;</span><br><span class="line">            this.swaggerUIOptions &#x3D; swaggerUIOptions.Value;</span><br><span class="line">            this.swaggerForOcelotUIOptions &#x3D; swaggerForOcelotUIOptions.Value;</span><br><span class="line">            this.httpClientFactory &#x3D; httpClientFactory;</span><br><span class="line">            this.swaggerJsonTransformer &#x3D; swaggerJsonTransformer;</span><br><span class="line">            this.swaggerEndPoints &#x3D; swaggerEndPoints.Value;</span><br><span class="line">            this.routes &#x3D; routes.Value;</span><br><span class="line">            this.swaggerServiceDiscoveryProvider &#x3D; swaggerServiceDiscoveryProvider;</span><br><span class="line">        &#125;</span><br><span class="line">    public async Task InvokeAsync(HttpContext context, RequestDelegate next)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">            var swaggerUIMiddleware &#x3D; new SwaggerUIMiddleware(next, this.hostingEnv, this.loggerFactory, this.swaggerUIOptions);</span><br><span class="line">            await swaggerUIMiddleware.Invoke(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这里RenderSwaggerUI实现IMiddleware，目的是让这个中间件被自动注册成一个scope中间件，每次都会执行构造函数.然后手动 new 一个 swaggerUIMiddleware并Invoke</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Swashbuckle的dynamic endpoint是可以实现的，只不过比较绕，这种方法不是最优解，但是可以解决问题。期待后续作者解决这个问题。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0" target="_blank" rel="noopener">Dependency injection in ASP.NET Core</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;不得不说&lt;a href=&quot;https://github.com/Burgyn/MMLib.SwaggerForOcelot&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>rxjs中tap,map,switchmap的区别</title>
    <link href="https://loremipsumsharp.github.io/2020/10/26/rxjs%E4%B8%ADtap,map,switchmap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://loremipsumsharp.github.io/2020/10/26/rxjs%E4%B8%ADtap,map,switchmap%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-10-25T17:52:23.830Z</published>
    <updated>2020-10-25T19:35:42.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端三大框架angular,react,vue中，angular是唯一一个对rxjs进行了深度集成的框架。rxjs通过大量内置operator，极大的简化了前端对事件流的处理。</p><p>对于一个.NET后端开发来说，上手rxjs不算难事，rxjs的operator都能在Linq上面找到对应的原型，<br>所以说对于有志于成为全栈的.NET开发，angular是一个不错的选择。</p><p>在angular开发过程中，tap,map,switchmap（经常被用来做限流）这三个operator的出场率很高，但由于这三个operator的命名很相似，经常容易搞混。这里简单介绍下这三个operator的区别</p><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p>tap，并不会返回一个新的observable，只是对observable的stream进行预处理，如在调试过程中，我们经常会用tap把stream中的元素先打印出来，观测处理前和处理后的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &quot;rxjs&quot;;</span><br><span class="line">import &#123; tap &#125; from &quot;rxjs&#x2F;operators&quot;;</span><br><span class="line"></span><br><span class="line">from([1, 2, 3])</span><br><span class="line">  .pipe(tap(item &#x3D;&gt;  &#x2F;* do something *&#x2F;))</span><br><span class="line">  .subscribe(item &#x3D;&gt; console.log(item));</span><br></pre></td></tr></table></figure><p>tap类似于Rx.NET中的do operator</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map，对input stream进行处理，并返回一个新的observable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &#39;rxjs&#39;;</span><br><span class="line">import &#123; map &#125; from &#39;rxjs&#x2F;operators&#39;;</span><br><span class="line"></span><br><span class="line">from([1, 2, 3])</span><br><span class="line">  .pipe(map((item) &#x3D;&gt; item + 2))</span><br><span class="line">  .subscribe((item) &#x3D;&gt; console.log(item));</span><br></pre></td></tr></table></figure><p>map类似于Rx.NET中的select operator</p><h3 id="switchMap"><a href="#switchMap" class="headerlink" title="switchMap"></a>switchMap</h3><p>将一个内嵌的observable做flatten处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &#39;rxjs&#39;;</span><br><span class="line">import &#123; map &#125; from &#39;rxjs&#x2F;operators&#39;;</span><br><span class="line"></span><br><span class="line">from([1, 2, 3])</span><br><span class="line">  observable as return value.</span><br><span class="line"> itself is a new observable now,</span><br><span class="line">  .pipe(map((item) &#x3D;&gt; methodWhichReturnsObservable(item)))</span><br><span class="line">  .subscribe((item) &#x3D;&gt; console.log(item));</span><br></pre></td></tr></table></figure><p>在上述代码中如果methodWhichReturnsObservable也是返回一个observable，那么console.log(item) 打印出来的item并不是一个number，而是一个observable。</p><p>为了处理这一种情况，只需将map改成switchmap</p><p>switchmap类似于Rx.NET中的selectmany</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; from &#125; from &quot;rxjs&quot;;</span><br><span class="line">import &#123; switchMap &#125; from &quot;rxjs&#x2F;operators&quot;;</span><br><span class="line"></span><br><span class="line">from([1, 2, 3])</span><br><span class="line">  .pipe(switchMap(item &#x3D;&gt; methodWhichReturnsObservable(item))</span><br><span class="line">  .subscribe(resultItem &#x3D;&gt; console.log(resultItem));</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">Rx Operators</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前端三大框架angular,react,vue中，angular是唯一一个对rxjs进行了深度集成的框架。rxjs通过大量内置operat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Grpc Channel没有关闭而导致的内存泄露问题排查</title>
    <link href="https://loremipsumsharp.github.io/2020/09/22/GrpcChannel%E6%B2%A1%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://loremipsumsharp.github.io/2020/09/22/GrpcChannel%E6%B2%A1%E6%9C%89%E6%AD%A3%E5%B8%B8%E5%85%B3%E9%97%AD%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2020-09-22T00:23:22.413Z</published>
    <updated>2020-10-04T18:44:10.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>日前上线了一个用于统计统计用户活跃度的服务，上线之后，出现了内存泄漏的问题，通过lldb对程序的core dump进行分析，最终找到了泄漏的原因</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>服务上线后，出现大量告警，提示服务器内存不足，grafana监控提示服务内存泄漏：</p><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200922084321.png" alt=""></p><p>使用将线上的服务的内存dump下来，继续观察：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;dotnet&#x2F;shared&#x2F;Microsoft.NETCore.App&#x2F;2.1.1&#x2F;createdump -u 1</span><br></pre></td></tr></table></figure><p>通过lldb加载core dump文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lldb-3.9 dotnet -c &#x2F;tmp&#x2F;20290824_activevalue_coredump  -o &quot;plugin load &#x2F;usr&#x2F;share&#x2F;dotnet&#x2F;shared&#x2F;Microsoft.NETCore.App&#x2F;2.1.1&#x2F;libsosplugin.so&quot;</span><br></pre></td></tr></table></figure><p>查看堆大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eeheap -gc</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200927023535.png" alt=""></p><p>进一步查看当前堆各个类型的对象数量<br><code>dumpheap -stat</code></p><p>提示有大量Grpc对象积压.</p><p>进一步，对项目的各个接口进行压测,对内存进行三次采样：</p><p>第一次采样77MB:</p><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/dasdasdas.png" alt=""></p><p>第二次采样82MB:</p><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/2323fadas.png" alt=""></p><p>第三次采样 86MB：</p><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/adasdasgdfasdas.png" alt=""></p><p>VS内存分析工具提示GRPC内存对象一直没有得到有效的控制，数量不断上升<br>在采样过程中手动进行GC，只是下降53个对象，大量channel仍然驻留内存:</p><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/dasdasfdvfsdvsdf.png" alt=""></p><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/dasdascas.png" alt=""></p><p>根据上述采样分析，可以肯定业务代码中存在grpc channel正常关闭的场景。</p><p>进一步查看代码发现：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200927024147.png" alt=""></p><p>每一次通过grpc client调用其他服务的时候会直接常见Channel，而不是复用之前的Channel，并且创建后的Channel没有关闭</p><p>修复这部分代码后，线上内存使用率恢复正常</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/grpc/grpc-java/issues/3268" target="_blank" rel="noopener">Channel creation best practice</a></p><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/grpc/performance?view=aspnetcore-5.0" target="_blank" rel="noopener">Performance best practices with gRPC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;日前上线了一个用于统计统计用户活跃度的服务，上线之后，出现了内存泄漏的问题，通过lldb对程序的core dump进行分析，最终找到了泄漏的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Union查询性能优</title>
    <link href="https://loremipsumsharp.github.io/2020/09/21/Union%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98/"/>
    <id>https://loremipsumsharp.github.io/2020/09/21/Union%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98/</id>
    <published>2020-09-20T18:58:22.193Z</published>
    <updated>2020-09-20T19:27:56.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Union的工作原理"><a href="#Union的工作原理" class="headerlink" title="Union的工作原理"></a>Union的工作原理</h2><p>假设现在有两个集合A：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blue</span><br><span class="line">green</span><br><span class="line">gray</span><br><span class="line">black</span><br></pre></td></tr></table></figure><p>集合B：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">green</span><br><span class="line">yellow</span><br><span class="line">blue</span><br></pre></td></tr></table></figure><p>现在对集合A、B进行Union操作，首先Mysql会创建一个临时表来暂存A ∪ B = C<br>Step1(将A的元素和B的元素都添加到C中)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">black</span><br><span class="line">blue</span><br><span class="line">blue</span><br><span class="line">gray</span><br><span class="line">green</span><br><span class="line">green</span><br><span class="line">red</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure><p>接下来对C进行去重，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">black</span><br><span class="line">blue</span><br><span class="line">gray</span><br><span class="line">green</span><br><span class="line">red</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><h3 id="使用Union-All"><a href="#使用Union-All" class="headerlink" title="使用Union All"></a>使用Union All</h3><p>对一个大数据集进行去重操作需要很高的算力，当业务场景可以接收重复结果的情况下，使用Union All，Union All不会对结果集进行去重，这个时候可以减少Union去重带来的性能损耗</p><h3 id="将查询条件放在Union的子查询中"><a href="#将查询条件放在Union的子查询中" class="headerlink" title="将查询条件放在Union的子查询中"></a>将查询条件放在Union的子查询中</h3><p>如果不将查询条件放在子查询之中，这个时候默认Union将各个子查询的结果全部查出来，然后放到一个临时表中，再对临时表进行过滤，这个时候，没办法利用到Mysql的索引，不利于性能的提高。所以使用Union操作的时候要尽量将查询条件，排序条件放在子查询之中。<br>另外需要注意的一点是，如果直接对子查询进行Order By操作，Mysql会提示<code>Incorrect usage of UNION and ORDER BY</code>,如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE username LIKE &#39;l%&#39; ORDER BY score ASC</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM t1 WHERE username LIKE &#39;%m%&#39; ORDER BY score ASC</span><br></pre></td></tr></table></figure><p>解决的办法就是用一个括号将子查询包起来，再进行Union操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(SELECT * FROM t1 WHERE username LIKE &#39;l%&#39; ORDER BY sroce ASC)</span><br><span class="line">UNION</span><br><span class="line">(SELECT * FROM t1 WHERE username LIKE &#39;%m%&#39; ORDER BY score ASC)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jb51.net/article/99842.htm" target="_blank" rel="noopener">MySQL中union和order by同时使用的实现方法</a></p><p><a href="https://www.iheavy.com/2013/06/13/how-to-optimize-mysql-union-for-high-speed/" target="_blank" rel="noopener">How to Optimize MySQL UNION For High Speed</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Union的工作原理&quot;&gt;&lt;a href=&quot;#Union的工作原理&quot; class=&quot;headerlink&quot; title=&quot;Union的工作原理&quot;&gt;&lt;/a&gt;Union的工作原理&lt;/h2&gt;&lt;p&gt;假设现在有两个集合A：&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal的应用</title>
    <link href="https://loremipsumsharp.github.io/2020/09/14/ThreadLocal%E5%9C%A8RabbitMq%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://loremipsumsharp.github.io/2020/09/14/ThreadLocal%E5%9C%A8RabbitMq%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-09-13T16:29:00.493Z</published>
    <updated>2020-09-13T17:29:49.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Thread-Local-Storage"><a href="#Thread-Local-Storage" class="headerlink" title="Thread-Local Storage"></a>Thread-Local Storage</h3><p>在日常开发过程中，你有时候可能会希望一些对象，变量可以做到线程隔离，不相互影响。为了实现这个需求，.NET引入了一个被称为<code>Thread-Local Storage</code> 的概念，通过<code>Thread-Local Storage</code>，变量、对象无需重复定义，也不需要添加锁，就可以实现在线程之间的相互隔离</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal<T></h3><p><code>ThreadLocal</code> 是 <code>Thread-Local Storage</code>的一个具体实现，一个<code>ThreadLocal</code>的对象字段，在不通线程之中可以做到相互隔离</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; contruct on this thread</span><br><span class="line">            ThreadLocalDemo demoObject &#x3D; new ThreadLocalDemo();</span><br><span class="line">            demoObject.PrintCounterValue();</span><br><span class="line">            demoObject.IncrementCounter();</span><br><span class="line">            demoObject.PrintCounterValue();</span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">            var resetEvent &#x3D; new ManualResetEvent(false);</span><br><span class="line">            ThreadPool.QueueUserWorkItem(state &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">             </span><br><span class="line">                ((ThreadLocalDemo)state).PrintCounterValue();</span><br><span class="line">                ((ThreadLocalDemo)state).IncrementCounter();</span><br><span class="line">                ((ThreadLocalDemo)state).PrintCounterValue();</span><br><span class="line"></span><br><span class="line">              </span><br><span class="line">                var demo &#x3D; new ThreadLocalDemo();</span><br><span class="line">                demo.IncrementCounter();</span><br><span class="line">                demo.PrintCounterValue();</span><br><span class="line"></span><br><span class="line">                resetEvent.Set();</span><br><span class="line">            &#125;, demoObject);</span><br><span class="line"></span><br><span class="line">            resetEvent.WaitOne();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class ThreadLocalDemo</span><br><span class="line">    &#123;</span><br><span class="line">        private ThreadLocal&lt;int&gt; counter;</span><br><span class="line">        private static ThreadLocal&lt;int&gt; staticCounter;</span><br><span class="line">        private static Guid staticId;</span><br><span class="line">        private Guid id;</span><br><span class="line"></span><br><span class="line">        static ThreadLocalDemo()</span><br><span class="line">        &#123;</span><br><span class="line">            staticCounter &#x3D; new ThreadLocal&lt;int&gt;();</span><br><span class="line">            staticId &#x3D; Guid.NewGuid();</span><br><span class="line">            Console.WriteLine($&quot;Static constructor:&quot;);</span><br><span class="line">            Console.WriteLine($&quot;thread id: &#123;Thread.CurrentThread.ManagedThreadId&#125;, type id: &#123;staticId&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ThreadLocalDemo()</span><br><span class="line">        &#123;</span><br><span class="line">            counter &#x3D; new ThreadLocal&lt;int&gt;();</span><br><span class="line">            id &#x3D; Guid.NewGuid();</span><br><span class="line">            Console.WriteLine($&quot;Constructor: thread id: &#123;Thread.CurrentThread.ManagedThreadId&#125;, object id &#123;id&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void IncrementCounter()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Incrementing both local and static counters&quot;);</span><br><span class="line">            counter.Value++;</span><br><span class="line">            staticCounter.Value++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void PrintCounterValue()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;Printing current values&quot;);</span><br><span class="line">            Console.WriteLine($&quot;thread id: &#123;Thread.CurrentThread.ManagedThreadId&#125;, object id &#123;id&#125;, counter: &#123;counter.Value&#125;, static Counter: &#123;staticCounter.Value&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Static constructor:</span><br><span class="line">thread id: 1, type id: 220a1d54-0d32-4961-9f19-9da5a625eaeb</span><br><span class="line">Constructor: thread id: 1, object id a655a69c-4c16-4a6e-88b3-c339f247d895</span><br><span class="line">Printing current values</span><br><span class="line">thread id: 1, object id a655a69c-4c16-4a6e-88b3-c339f247d895, counter: 0, static Counter: 0</span><br><span class="line">Incrementing both local and static counters</span><br><span class="line">Printing current values</span><br><span class="line">thread id: 1, object id a655a69c-4c16-4a6e-88b3-c339f247d895, counter: 1, static Counter: 1</span><br><span class="line">Printing current values</span><br><span class="line">thread id: 4, object id a655a69c-4c16-4a6e-88b3-c339f247d895, counter: 0, static Counter: 0</span><br><span class="line">Incrementing both local and static counters</span><br><span class="line">Printing current values</span><br><span class="line">thread id: 4, object id a655a69c-4c16-4a6e-88b3-c339f247d895, counter: 1, static Counter: 1</span><br><span class="line">Constructor: thread id: 4, object id 3175a74e-255c-4934-ae9f-e9790d05e486</span><br><span class="line">Incrementing both local and static counters</span><br><span class="line">Printing current values</span><br><span class="line">thread id: 4, object id 3175a74e-255c-4934-ae9f-e9790d05e486, counter: 1, static Counter: 2</span><br></pre></td></tr></table></figure><p>上述代码，所在demoObj的实例计数器在Thread 1 为 1，但当进入到Thread 4 的时候，实例计数器被重置为0，也就是说<code>counter</code>的值受线程影响，不同的线程有不同的拷贝</p><h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><p><code>ThreadLocal</code>目前在自己维护的项目中应用的比较少，大多数情况会选择在线程上下文中定义一个新的变量，而不是去引用外部的<code>ThreadLocal</code>变量，目前唯一用到的就是在RabbitMQ。</p><p>根据RabbitMQ的官方文档，IModel对象不是一个线程安全的对象，每一个每一个线程应该有且只有一个IModel,建多了也没意义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Don’t share channels between threads</span><br><span class="line">Use one channel per thread in your application, and make sure that you don’t share channels between threads as most clients don’t make channels thread-safe.</span><br><span class="line"></span><br><span class="line">CloudAMQP allows you to scale your instances to meet demand while providing mechanisms to troubleshoot leaks. If you have any questions, you can reach out to us at support@cloudamqp.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public interface IMessagePublisher</span><br><span class="line">  &#123;</span><br><span class="line">      Task PublishAsync&lt;TMessage&gt;(TMessage message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public class MessagePublisher : IMessagePublisher</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">      private readonly ISerializer _serializer;</span><br><span class="line">      public MessagePublisher(ISerializer serializer, IConnectionFactory connectionFactory)</span><br><span class="line">      &#123;</span><br><span class="line">          _serializer &#x3D; serializer;</span><br><span class="line">          _channel &#x3D; new ThreadLocal&lt;IModel&gt;(() &#x3D;&gt; connectionFactory.CreateConnection().CreateModel());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public async Task PublishAsync&lt;TMessage&gt;(TMessage message)</span><br><span class="line">      &#123;</span><br><span class="line">          var type &#x3D; typeof(TMessage);</span><br><span class="line">          var exchangeName &#x3D; GetExchangeName(type);</span><br><span class="line">          var routingKey &#x3D; GetRoutingKey(type);</span><br><span class="line">          var data &#x3D; _serializer.Serialize(message);</span><br><span class="line"></span><br><span class="line">          await PublishAsync(exchangeName, routingKey, data);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   services.AddSingleton&lt;IMessagePublisher, MessagePublisher&gt;();</span><br></pre></td></tr></table></figure><p>通过上述代码，虽然IMessagePublisher是单例，但channel也可以实现做到每一个线程唯一，最大程度的减少了对象的创建</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cloudamqp.com/blog/2019-11-13-the-relationship-between-connections-and-channels-in-rabbitmq.html" target="_blank" rel="noopener">What is the relationship between connections and channels in RabbitMQ?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;Thread-Local-Storage&quot;&gt;&lt;a href=&quot;#Thread-Local-Storage&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基于 kubernetes 的动态 jenkins slave的自动化发布</title>
    <link href="https://loremipsumsharp.github.io/2020/08/10/%E5%9F%BA%E4%BA%8E%20kubernetes%20%E7%9A%84%E5%8A%A8%E6%80%81%20jenkins%20slave%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83/"/>
    <id>https://loremipsumsharp.github.io/2020/08/10/%E5%9F%BA%E4%BA%8E%20kubernetes%20%E7%9A%84%E5%8A%A8%E6%80%81%20jenkins%20slave%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83/</id>
    <published>2020-08-09T17:08:32.123Z</published>
    <updated>2020-08-09T17:44:57.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前几天在youtube上面看了一个关于如何<a href="https://www.youtube.com/watch?v=eMOzF_xAm7w&t=3s" target="_blank" rel="noopener">使用jenkins实现k8s的CI/CD</a>,现对视频中相关的配置方法进行了文字性的总结，并在此基础上引入了sematic release实现版本号的自动生成</p><h2 id="jenkins-动态-slave"><a href="#jenkins-动态-slave" class="headerlink" title="jenkins 动态 slave"></a>jenkins 动态 slave</h2><p>持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如：</p><p>主 Master 发生单点故障时，整个流程都不可用了<br>每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲<br>资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态<br>资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。<br>正因为上面的这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题，下图是基于 Kubernetes 搭建 Jenkins 集群的简单示意图：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard.png" alt="image"></p><h2 id="helm"><a href="#helm" class="headerlink" title="helm"></a>helm</h2><p>Kubernetes是容器集群管理系统，每个成功的软件平台都有一个优秀的打包系统，比如 Debian、Ubuntu 的 apt，Redhat、Centos 的 yum。而 Helm 则是 Kubernetes 上的包管理器。helm相当于一个应用商店，将一个在云上部署的应用相关的组件全部打包起来，进行安装、升级、管理等，如下图所示：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(1).png" alt="image"></p><h3 id="HelmClient"><a href="#HelmClient" class="headerlink" title="HelmClient"></a>HelmClient</h3><p>是用户命令行工具，其主要负责如下：</p><ul><li>本地 chart 开发</li><li>仓库管理</li><li>与 Tiller sever 交互</li><li>发送预安装的 chart</li><li>查询 release 信息</li><li>要求升级或卸载已存在的 release</li></ul><h3 id="TillerServer"><a href="#TillerServer" class="headerlink" title="TillerServer"></a>TillerServer</h3><p>是一个部署在 Kubernetes集群内部的 server，其与 Helm client、Kubernetes API server 进行交互。Tiller server 主要负责如下：</p><ul><li>监听来自 Helm client 的请求</li><li>通过 chart 及其配置构建一次发布</li><li>安装 chart 到 Kubernetes集群，并跟踪随后的发布</li><li>通过与 Kubernetes交互升级或卸载 chart</li><li>简单的说，client 管理 charts，而 server 管理发布 release</li></ul><h2 id="Semantic-Release"><a href="#Semantic-Release" class="headerlink" title="Semantic Release"></a>Semantic Release</h2><p>是一个自动生成版本号,发布日志的工具。semantic release按照<br><a href="https://semver.org/" target="_blank" rel="noopener">Semantic Versioning</a>的规范,根据用户的<a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">commit message</a>来确定下一个版本号</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="安装Kubernetes插件"><a href="#安装Kubernetes插件" class="headerlink" title="安装Kubernetes插件"></a>安装Kubernetes插件</h3><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(2).png" alt="image"></p><h3 id="配置kubernetes插件"><a href="#配置kubernetes插件" class="headerlink" title="配置kubernetes插件"></a>配置kubernetes插件</h3><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(3).png" alt="image"></p><p>1.Kubernetes URL，API SERVER的URL</p><p>2.Kubernetes server certificate key，证书密钥,可以在 ~/.kube/config 文件中获得</p><p>3.Kubernetes Namespace，Slave Pod所在的Kubernetes namespace</p><p>4.Credentials，访问API SERVER时使用的Token</p><p>5.Jenkins URL，Jenkins Master节点的URL</p><p>6.Jenkins Tunnel，Jenkins Tunnel地址</p><p>7.授权,namespace与3保持一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">---</span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;pods&quot;]</span><br><span class="line">  verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;]</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;pods&#x2F;exec&quot;]</span><br><span class="line">  verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;]</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;pods&#x2F;log&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;,&quot;list&quot;,&quot;watch&quot;]</span><br><span class="line">- apiGroups: [&quot;&quot;]</span><br><span class="line">  resources: [&quot;secrets&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;]</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: jenkins</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: jenkins</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding jenkins --clusterrole cluster-admin --serviceaccount&#x3D;&lt;namespace&gt;:jenkins</span><br></pre></td></tr></table></figure><h1 id="发布配置"><a href="#发布配置" class="headerlink" title="发布配置"></a>发布配置</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(4).png" alt="image"></p><ol><li>charts目录，存放helm 模板文件</li><li>src，项目代码</li><li>.releaserc.json，semantci-release配置文件</li><li>CHANGELOG.MD，发布日志，由semantic-release自动生成</li><li>Jenkinsfile，Jenkins 流水线的定义文件</li></ol><h2 id="gitlab-集成"><a href="#gitlab-集成" class="headerlink" title="gitlab 集成"></a>gitlab 集成</h2><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(5).png" alt="image"></p><h2 id="创建Pipeline任务"><a href="#创建Pipeline任务" class="headerlink" title="创建Pipeline任务"></a>创建Pipeline任务</h2><h3 id="配置pipeline环境变量"><a href="#配置pipeline环境变量" class="headerlink" title="配置pipeline环境变量"></a>配置pipeline环境变量</h3><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(6).png" alt="image"></p><h3 id="配置gitlab-trigger"><a href="#配置gitlab-trigger" class="headerlink" title="配置gitlab trigger"></a>配置gitlab trigger</h3><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(7).png" alt="image"></p><p>注意：需要勾选<strong>ci-skip</strong>选项,防止自动生成changelog时重复触发CI</p><h3 id="配置Pipeline"><a href="#配置Pipeline" class="headerlink" title="配置Pipeline"></a>配置Pipeline</h3><p><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/clipboard%20(8).png" alt="image"></p><h2 id="集成semantic-release"><a href="#集成semantic-release" class="headerlink" title="集成semantic-release"></a>集成semantic-release</h2><pre><code>{    &quot;branch&quot;: &quot;master&quot;,    &quot;plugins&quot;: [        &quot;@semantic-release/commit-analyzer&quot;,        &quot;@semantic-release/release-notes-generator&quot;,        [            &quot;@semantic-release/changelog&quot;,            {                &quot;changelogFile&quot;: &quot;CHANGELOG.md&quot;,                &quot;changelogTitle&quot;: &quot;# Changelog | Consul Kube Sync&quot;            }        ],        [            &quot;@semantic-release/git&quot;,            {                &quot;assets&quot;: [                    &quot;CHANGELOG.md&quot;                ],                &quot;message&quot;: &quot;[ci-skip]&quot;            }        ],        [            &quot;@semantic-release/exec&quot;,            {                &quot;prepareCmd&quot;: &quot;echo ${nextRelease.version} &gt; .next-version&quot;            }        ]    ]}</code></pre><h2 id="jenkinsfile"><a href="#jenkinsfile" class="headerlink" title="jenkinsfile"></a>jenkinsfile</h2><p>请参考备注示例项目</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p><a href="https://github.com/LoremipsumSharp/JenkinsKubernetesAutomation" target="_blank" rel="noopener">示例项目</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前几天在youtube上面看了一个关于如何&lt;a href=&quot;https://www.youtube.com/watch?v=eMOzF_xA
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DNS的一些入门的基本概念</title>
    <link href="https://loremipsumsharp.github.io/2020/08/05/DNS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://loremipsumsharp.github.io/2020/08/05/DNS%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%A5%E9%97%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-08-04T18:49:52.854Z</published>
    <updated>2020-08-04T18:50:24.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Authoritative-Servers"><a href="#Authoritative-Servers" class="headerlink" title="Authoritative Servers"></a>Authoritative Servers</h2><p>DNS Servers can be configured to host more than one domain. A server can be primary for one domain, and secondary for another. The term authoritative refers to any DNS servers that has a complete copy of the domain’s information, whether it was entered by an administrator or transferred from a primary server. Thus, a secondary server can and should be authoritative for any domain for which it performs secondary authoritative resolution.</p><h2 id="Authoritative-Responses"><a href="#Authoritative-Responses" class="headerlink" title="Authoritative Responses"></a>Authoritative Responses</h2><p>Any response to a DNS query that originates from a DNS server with a complete copy of the zone file is said to be an ‘authoritative response’. What complicates matters is that DNS servers cache the answers they receive. If a DNS server has an SOA record, it fills in a field in the response that signals that the server queried is authoritative for the domain and that the answer is authoritative. Any DNS server external to that domain that retrieved the authoritative response will cache that answer. The next time the server is queried, it will say that the answer it is giving is authoritative, even though it is not authoritative for that domain.</p><p>In other words, it IS possible for a DNS server that is NOT an authoritative server for a domain to give an ‘authoritative response’ to a DNS query for a domain it does not serve.</p><p>Non-authoritative responses come from DNS servers that have cached an answer for a given host, but received that information from a server that is not authoritative for the domain.</p><h2 id="Kind-of-DNS-Server"><a href="#Kind-of-DNS-Server" class="headerlink" title="Kind of DNS Server"></a>Kind of DNS Server</h2><p>DNS architecture works on an inverted tree structure. At the top of the inverted tree is the 13 DNS root servers, and then comes the TLD(Top Level Domain) servers, and beneath the TLD servers comes the authoritative DNS server for a particular domain(sometimes called as secondary domains.)</p><h2 id="Kind-of-DNS-Query"><a href="#Kind-of-DNS-Query" class="headerlink" title="Kind of DNS Query"></a>Kind of DNS Query</h2><p><a href="https://www.slashroot.in/difference-between-iterative-and-recursive-dns-query" target="_blank" rel="noopener">difference between iterative and recursive dns query</a></p><h2 id="Dns-Zone"><a href="#Dns-Zone" class="headerlink" title="Dns Zone"></a>Dns Zone</h2><p><a href="https://www.slashroot.in/what-dns-zone-file-complete-tutorial-zone-file-and-its-contents" target="_blank" rel="noopener">What is a DNS ZONE file: A Complete Tutorial on zone file and its contents</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Authoritative-Servers&quot;&gt;&lt;a href=&quot;#Authoritative-Servers&quot; class=&quot;headerlink&quot; title=&quot;Authoritative Servers&quot;&gt;&lt;/a&gt;Authoritative Servers&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>.NET内存管理中需要掌握的一些基本概念(持续更新）</title>
    <link href="https://loremipsumsharp.github.io/2020/07/16/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%AD%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://loremipsumsharp.github.io/2020/07/16/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%AD%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-07-16T05:40:09.000Z</published>
    <updated>2020-07-18T17:28:14.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Working-set"><a href="#Working-set" class="headerlink" title="Working set"></a>Working set</h2><p>this is a part of virtual address space that currently resides in the physical memory. This means it can be further divided into:</p><ul><li>Private working set - consists of committed (private) pages in the<br>physical memory.</li><li>Shareable working set - consists of all shareable pages (no matter if they are actually shared or not)</li><li>Shared working set - consists of shareable pages that are actually<br>shared with other processes.</li><li>Private bytes - all committed (private) pages - both in the physical and paged memory.</li><li>Virtual bytes - both committed (private) and reserved memory</li><li>Paged bytes - part of the virtual bytes that are stored in the page file.<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200716021336.png" alt=""></li></ul><h2 id="Value-Types"><a href="#Value-Types" class="headerlink" title="Value Types"></a>Value Types</h2><p>We have two categories of value types in the Common Language Specification:</p><ul><li>structs - there are many built-in integral types (char, byte, integer, and so forth), floating-point types, and bool. And, of course, the user can define its own structs.</li><li>enumerations - they are basically an extension of integral types, becoming a type that consists of a set of named constants. From the memory-management point of view, they are just integral types so we won’t deal with them in this book at all as they are in fact structs also internally.</li></ul><h2 id="使用struct的好处"><a href="#使用struct的好处" class="headerlink" title="使用struct的好处"></a>使用struct的好处</h2><ol><li>struct类型是Value Type，所以struct有可能被分配在stack上，分配在stack上可以避免因为分配的heap上所带来的gc</li><li>strcut在同等条件下，所需的内存比class要小（这个是因为struct不需要存放相关的元信息）</li><li>struct更加符合data locality的要求,refernce type 总是包含两个额外的字段，给定一个64B的cache line,refernce type命中缓存的概率远低于strcut<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200716025533.png" alt=""><br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200716025454.png" alt=""></li></ol><h2 id="Lexical-Scope"><a href="#Lexical-Scope" class="headerlink" title="Lexical Scope"></a>Lexical Scope</h2><p>In the simplest words,it defines areas of code in which the given variable is visiable</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Working-set&quot;&gt;&lt;a href=&quot;#Working-set&quot; class=&quot;headerlink&quot; title=&quot;Working set&quot;&gt;&lt;/a&gt;Working set&lt;/h2&gt;&lt;p&gt;this is a part of virtual address 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在Kafka流处理中自定义时间窗口</title>
    <link href="https://loremipsumsharp.github.io/2020/07/05/Kafka%E6%B5%81%E5%A4%84%E7%90%86%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3/"/>
    <id>https://loremipsumsharp.github.io/2020/07/05/Kafka%E6%B5%81%E5%A4%84%E7%90%86%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3/</id>
    <published>2020-07-05T08:16:56.269Z</published>
    <updated>2020-07-05T16:37:09.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题的背景"><a href="#问题的背景" class="headerlink" title="问题的背景"></a>问题的背景</h2><p>近期有一个项目在做重构，一部分业务要迁移到Kafka上面来进一步提高性能，需求是这样的：根据一定规则量化用户行为并实时统计用户活跃度，每一个统计周期1天，即24小时。</p><p>咋一看，这个问题很好处理，直接使用Kafka流处理中的时间窗口函数，每一个窗口的长度为24小时，每次接收到一条消息就通过Kafka Stream Api进行聚合，时间窗口可以直接使用Tumbling Windows来解决。但是产品还提出了另外一个需求，就是统计时间范围，从每天的22:00 ~ 第二天的21:59</p><p>这种情况，无法用Tumbling windows来解决，因为Tumbling windows定义的时间范围是从每天的（00:00~23:59)，Kafka的相关文档也没又提到这个场景需要如何处理。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>实际上，这个需求可以通过一下两种方法：</p><ol><li>通过Timeextractor来重写时间</li><li>自定义时间窗口</li></ol><h3 id="通过TimeExtractor来重写时间戳"><a href="#通过TimeExtractor来重写时间戳" class="headerlink" title="通过TimeExtractor来重写时间戳"></a>通过TimeExtractor来重写时间戳</h3><p>既然产品需求是从每天的22:00 ~ 第二天的21:59，那么我可以在原有的时间戳的基础上加两个小时来补全Tumbling windows所定义的时间范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class UserEventTimestampExtractor implements TimestampExtractor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public long extract(ConsumerRecord&lt;Object, Object&gt; record, long partitionTime) &#123;</span><br><span class="line">        UserEvent userEvent &#x3D; (UserEvent) record.value();</span><br><span class="line">        return userEvent.getCreateTime().plusHours(2)</span><br><span class="line">        .toInstant(ZoneOffset.UTC).toEpochMilli();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义时间窗口（建议使用，更加直观）"><a href="#自定义时间窗口（建议使用，更加直观）" class="headerlink" title="自定义时间窗口（建议使用，更加直观）"></a>自定义时间窗口（建议使用，更加直观）</h3><p>继承 Windows<TimeWindow> 并重写 windowsFor 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Map&lt;Long, TimeWindow&gt; windowsFor(final long timestamp) &#123;</span><br><span class="line">    final Instant instant &#x3D; Instant.ofEpochMilli(timestamp);</span><br><span class="line"></span><br><span class="line">    final ZonedDateTime zonedDateTime &#x3D; instant.atZone(zoneId);</span><br><span class="line">    final ZonedDateTime startTime &#x3D; zonedDateTime.getHour() &gt;&#x3D; startHour ? zonedDateTime.truncatedTo(ChronoUnit.DAYS).withHour(startHour) : zonedDateTime.truncatedTo(ChronoUnit.DAYS).minusDays(1).withHour(startHour);</span><br><span class="line">    final ZonedDateTime endTime &#x3D; startTime.plusDays(1);</span><br><span class="line"></span><br><span class="line">    final Map&lt;Long, TimeWindow&gt; windows &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class="line">    windows.put(toEpochMilli(startTime), new TimeWindow(toEpochMilli(startTime), toEpochMilli(endTime)));</span><br><span class="line">    return windows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的starhour取22</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/confluentinc/kafka-streams-examples/blob/5.5.0-post/src/test/java/io/confluent/examples/streams/window/DailyTimeWindows.java" target="_blank" rel="noopener">kafka-streams-examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题的背景&quot;&gt;&lt;a href=&quot;#问题的背景&quot; class=&quot;headerlink&quot; title=&quot;问题的背景&quot;&gt;&lt;/a&gt;问题的背景&lt;/h2&gt;&lt;p&gt;近期有一个项目在做重构，一部分业务要迁移到Kafka上面来进一步提高性能，需求是这样的：根据一定规则量化用户行为并实
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何安装特定版本的dotnet sdk</title>
    <link href="https://loremipsumsharp.github.io/2020/06/25/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84dotnet%20sdk/"/>
    <id>https://loremipsumsharp.github.io/2020/06/25/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84dotnet%20sdk/</id>
    <published>2020-06-25T13:47:41.999Z</published>
    <updated>2020-06-28T06:45:59.851Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu上通过package mananger安装dotnet sdk默认情况下会自动安装最新版的,但有些时候我们并不希望安装最新版，而是安装一个特定的版本，这个时候可以通过一下三种方法：</p><ol><li>执行<a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script" target="_blank" rel="noopener">dotnet-install</a> 并指定特定版本号，如:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;dotnet-install.sh --version 3.1.201</span><br></pre></td></tr></table></figure><ol start="2"><li>手动下载二进制tar包并解压（比较麻烦）</li><li>通过package mananger进行安装(官网目前没有介绍这种方法)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#首先查看目前可安装的包版本</span><br><span class="line">apt policy dotnet-sdk-3.1</span><br><span class="line">#安装指定版本</span><br><span class="line">apt-get install  dotnet-sdk-3.1&#x3D;3.1.201-1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在ubuntu上通过package mananger安装dotnet sdk默认情况下会自动安装最新版的,但有些时候我们并不希望安装最新版，而是安装一个特定的版本，这个时候可以通过一下三种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行&lt;a href=&quot;https://docs.mi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring Data MongoDb 通过Gradle集成QureyDSL的配置方法</title>
    <link href="https://loremipsumsharp.github.io/2020/05/17/Spring%20Data%20MongoDb%20%E9%80%9A%E8%BF%87Gradle%E9%9B%86%E6%88%90QureyDSL%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>https://loremipsumsharp.github.io/2020/05/17/Spring%20Data%20MongoDb%20%E9%80%9A%E8%BF%87Gradle%E9%9B%86%E6%88%90QureyDSL%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-17T15:39:20.000Z</published>
    <updated>2020-05-17T15:39:06.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>QueryDSL是一个通用的查询框架，专注于通过Java API构建类型安全的SQL查询。目前在 Github 上的发布的 Release 版本已经多达 251 个版本，目前最新版是 4.3.1 ，并且由 Querydsl Google组 和 StackOverflow 两个团队提供支持。QueryDSL 是一个框架，可用于构造静态类型的类似SQL的查询。可以通过诸如 QueryDSL 之类的 API 构造查询，而不是将查询编写为内联字符串或将其外部化为XML文件。</p><p>例如，与简单字符串相比，使用 API 的好处是</p><ul><li><p>IDE中的代码完成</p></li><li><p>几乎没有语法无效的查询</p></li><li><p>可以安全地引用域类型和属性</p></li><li><p>更好地重构域类型的更改</p></li></ul><p>目前网上能够查阅到通过gradle集成QueryDSL的资料非常少，大部分是基于Maven，基于gradle的配置方法很多都是错的（这个是由于gradle的版本升级，新版本的gradle对QueryDSL没有做到向下兼容）</p><h2 id="gradle配置方法"><a href="#gradle配置方法" class="headerlink" title="gradle配置方法"></a>gradle配置方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#39;org.springframework.boot&#39; version &#39;2.2.5.RELEASE&#39;</span><br><span class="line">    id &#39;io.spring.dependency-management&#39; version &#39;1.0.9.RELEASE&#39;</span><br><span class="line">    id &#39;java&#39;</span><br><span class="line">    id &quot;com.ewerk.gradle.plugins.querydsl&quot; version &quot;1.0.10&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &#x3D; &#39;io.loremipsum&#39;</span><br><span class="line">version &#x3D; &#39;0.0.1-SNAPSHOT&#39;</span><br><span class="line">sourceCompatibility &#x3D; &#39;11&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library &#x3D; &#39;com.querydsl:querydsl-apt:4.1.4&#39;</span><br><span class="line">    querydslSourcesDir &#x3D; &#39;src&#x2F;main&#x2F;querydsl&#39;</span><br><span class="line">    springDataMongo &#x3D; true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs &#x3D; [&#39;src&#x2F;main&#x2F;java&#39;, &#39;src&#x2F;main&#x2F;querydsl&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当gradle版本&gt;5.0的时候需要加上这个配置</span><br><span class="line">compileQuerydsl &#123;</span><br><span class="line">    options.annotationProcessorPath &#x3D; configurations.querydsl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.springframework.boot:spring-boot-starter-data-mongodb&#39;</span><br><span class="line">    compile &#39;org.springframework.boot:spring-boot-starter-web&#39;</span><br><span class="line"></span><br><span class="line">    compile(&quot;com.querydsl:querydsl-core:4.1.4&quot;)</span><br><span class="line">    compile(&quot;com.querydsl:querydsl-mongodb:4.1.4&quot;)</span><br><span class="line">    compile(&quot;com.querydsl:querydsl-apt:4.1.4&quot;)</span><br><span class="line"></span><br><span class="line">    compile &#39;org.projectlombok:lombok&#39;</span><br><span class="line">    annotationProcessor &#39;org.projectlombok:lombok&#39;</span><br><span class="line"></span><br><span class="line">    testCompile(&#39;org.springframework.boot:spring-boot-starter-test&#39;)</span><br><span class="line">    testCompile &#39;de.flapdoodle.embed:de.flapdoodle.embed.mongo&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上述配置mongodb的依赖必须声明为compile（如果通过spring boot initializer创建项目,这里会被声明为implementation)，否则会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Annotation processor &#39;org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor&#39; not found</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/babycomeon/p/11605809.html" target="_blank" rel="noopener">Spring Boot （六）： 为 JPA 插上翅膀的 QueryDSL</a></p><p><a href="https://stackoverflow.com/questions/53913274/querydsl-annotation-processor-issue-after-upgrade-to-gradle-5" target="_blank" rel="noopener">Querydsl Annotation Processor issue after upgrade to Gradle 5</a></p><p><a href="https://github.com/ewerk/gradle-plugins/issues/108" target="_blank" rel="noopener">querydsl-plugin don’t work in Gradle 5.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;QueryDSL是一个通用的查询框架，专注于通过Java API构建类型安全的SQL查询。目前在 Github 上的发布的 Release 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用ValueTask减少假异步代码引起的GC</title>
    <link href="https://loremipsumsharp.github.io/2020/04/27/%E4%BD%BF%E7%94%A8ValueTask%E5%87%8F%E5%B0%91%E5%81%87%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%BC%95%E8%B5%B7%E7%9A%84GC/"/>
    <id>https://loremipsumsharp.github.io/2020/04/27/%E4%BD%BF%E7%94%A8ValueTask%E5%87%8F%E5%B0%91%E5%81%87%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%BC%95%E8%B5%B7%E7%9A%84GC/</id>
    <published>2020-04-27T14:43:07.391Z</published>
    <updated>2020-04-30T04:50:56.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="async-await代码存在的问题"><a href="#async-await代码存在的问题" class="headerlink" title="async/await代码存在的问题"></a>async/await代码存在的问题</h2><p>async/await是.NET4.5引入的一个语法糖，如下所示，下面的代码首先会以同步的方法判断一个文件是否存在，如果存在，那么就会已异步的方式去读取文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public async Task&lt;string&gt; ReadFileAsync(string filename)</span><br><span class="line">&#123;</span><br><span class="line">    if (!File.Exists(filename))</span><br><span class="line">        return string.Empty;</span><br><span class="line">    return await File.ReadAllTextAsync(filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过async/await开发人员可以编写更加简洁的异步代码，通过IL SPY我们可以观察到，编译器实际上将async/await转为为了一个StateMachine,如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[AsyncStateMachine(typeof(Program.&lt;ReadFileAsync&gt;d__14))]</span><br><span class="line">public Task&lt;string&gt; ReadFileAsync(string filename)</span><br><span class="line">&#123;</span><br><span class="line">    Program.&lt;ReadFileAsync&gt;d__14 &lt;ReadFileAsync&gt;d__;</span><br><span class="line">    &lt;ReadFileAsync&gt;d__.filename &#x3D; filename;</span><br><span class="line">    &lt;ReadFileAsync&gt;d__.&lt;&gt;t__builder &#x3D; AsyncTaskMethodBuilder&lt;string&gt;.</span><br><span class="line">    Create();</span><br><span class="line">    &lt;ReadFileAsync&gt;d__.&lt;&gt;1__state &#x3D; -1;</span><br><span class="line">    AsyncTaskMethodBuilder&lt;string&gt; &lt;&gt;t__builder &#x3D; &lt;ReadFileAsync&gt;d__.&lt;&gt;t__</span><br><span class="line">    builder;</span><br><span class="line">    &lt;&gt;t__builder.Start&lt;Program.&lt;ReadFileAsync&gt;d__14&gt;(ref &lt;ReadFileAsync&gt;d__);</span><br><span class="line">    return &lt;ReadFileAsync&gt;d__.&lt;&gt;t__builder.Task;</span><br><span class="line">&#125;</span><br><span class="line">[CompilerGenerated]</span><br><span class="line">[StructLayout(LayoutKind.Auto)]</span><br><span class="line">private struct &lt;ReadFileAsync&gt;d__14 : IAsyncStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    void IAsyncStateMachine.MoveNext()</span><br><span class="line">    &#123;</span><br><span class="line">        int num &#x3D; this.&lt;&gt;1__state;</span><br><span class="line">        string result;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            TaskAwaiter&lt;string&gt; awaiter;</span><br><span class="line">            if (num !&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                if (!File.Exists(this.filename))</span><br><span class="line">                &#123;</span><br><span class="line">                    result &#x3D; string.Empty;</span><br><span class="line">                    goto IL_A4;</span><br><span class="line">                &#125;</span><br><span class="line">                awaiter &#x3D; File.ReadAllTextAsync(this.filename,</span><br><span class="line">                default(CancellationToken)).GetAwaiter();</span><br><span class="line">                if (!awaiter.get_IsCompleted())</span><br><span class="line">                &#123;</span><br><span class="line">                    this.&lt;&gt;1__state &#x3D; 0;</span><br><span class="line">                    this.&lt;&gt;u__1 &#x3D; awaiter;</span><br><span class="line">                    this.&lt;&gt;t__builder.AwaitUnsafeOnCompleted&lt;TaskAwaiter</span><br><span class="line">                    &lt;string&gt;, Program.&lt;ReadFileAsync&gt;d__14&gt;(ref awaiter, ref</span><br><span class="line">                    this);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            awaiter &#x3D; this.&lt;&gt;u__1;</span><br><span class="line">            this.&lt;&gt;u__1 &#x3D; default(TaskAwaiter&lt;string&gt;);</span><br><span class="line">            this.&lt;&gt;1__state &#x3D; -1;</span><br><span class="line">        &#125;   </span><br><span class="line">        result &#x3D; awaiter.GetResult();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception exception)</span><br><span class="line">    &#123;</span><br><span class="line">        this.&lt;&gt;1__state &#x3D; -2;</span><br><span class="line">        this.&lt;&gt;t__builder.SetException(exception);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IL_A4:</span><br><span class="line">    this.&lt;&gt;1__state &#x3D; -2;</span><br><span class="line">    this.&lt;&gt;t__builder.SetResult(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到上面的代码，当文件不存在的时候会执行goto语句，也就是this.&lt;&gt;t__builder.SetResult(result)，t_builder是AsyncTaskMethodBuilder<T>的一个实例，<br>我们可以看下SetResult的<a href="https://github.com/dotnet/runtime/blob/110282c71b3f7e1f91ea339953f4a0eba362a62c/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/AsyncTaskMethodBuilderT.cs" target="_blank" rel="noopener">实现</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void SetResult(TResult result)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Get the currently stored task, which will be non-null if get_Task has already been accessed.</span><br><span class="line">    &#x2F;&#x2F; If there isn&#39;t one, get a task and store it.</span><br><span class="line">    if (m_task is null)</span><br><span class="line">    &#123;</span><br><span class="line">        m_task &#x3D; GetTaskForResult(result);</span><br><span class="line">        Debug.Assert(m_task !&#x3D; null, $&quot;&#123;nameof(GetTaskForResult)&#125; should never return null&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Slow path: complete the existing task.</span><br><span class="line">        SetExistingTaskResult(m_task, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于此时这个时候并产生真正的异步操作，所以m_task is null 成立,查看GetTaskForResult(result)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[MethodImpl(MethodImplOptions.AggressiveInlining)] </span><br><span class="line">&#x2F;&#x2F; method looks long, but for a given TResult it results in a relatively small amount of asm</span><br><span class="line">internal static Task&lt;TResult&gt; GetTaskForResult(TResult result)</span><br><span class="line">&#123;</span><br><span class="line">    if (null !&#x3D; (object?)default(TResult)) &#x2F;&#x2F; help the JIT avoid the value type branches for ref types</span><br><span class="line">    &#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">    else if (result &#x3D;&#x3D; null) &#x2F;&#x2F; optimized away for value types</span><br><span class="line">    &#123;</span><br><span class="line">        return s_defaultResultTask;</span><br><span class="line">    &#125;</span><br><span class="line">    return new Task&lt;TResult&gt;(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于string是引用类型且result不为null,所以必然会导致一个新的Task对象被创建，那么也就是说，即便不存在异步调用，也会创建一个新的Task对象，如果存在大量的假异步调用，势必会造成成大量的一代GC，从而影响程序的性能。</p><h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><p>为了解决上述问题，.NET CORE 2.1引入了一个新的概念，ValueTask：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public struct ValueTask&lt;TResult&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    IValueTaskSource&lt;TResult&gt;</span><br><span class="line">    internal readonly object _obj;</span><br><span class="line">    internal readonly TResult _result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ValueTask改写ReadFile代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public async ValueTask&lt;string&gt; ReadFileAsync(string filename)</span><br><span class="line">&#123;</span><br><span class="line">    if (!File.Exists(filename))</span><br><span class="line">        return string.Empty;</span><br><span class="line">    return await File.ReadAllTextAsync(filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用ReadFileAsync时，可以使用ValueTask.IsCompleted来判断这个调用是不是假异步调用，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var valueTask &#x3D; ReadFileAsync();</span><br><span class="line">if(valueTask.IsCompleted)</span><br><span class="line">&#123;</span><br><span class="line">    return valueTask.Result;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    return await valueTask.AsTask();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果假异步调用，IsCompleted为true，这个时候返回valueTask.Result,不会产生Task对象的分配而ValueTask本身也是一个值类型，也不会产生allocation。反之，如果是真异步调用则按照原来的逻辑去执行。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>当应用程序对性能要求比较苛刻的时候并且存在大量假异步调用的情况下，可以考虑使用ValueTask来提高性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;async-await代码存在的问题&quot;&gt;&lt;a href=&quot;#async-await代码存在的问题&quot; class=&quot;headerlink&quot; title=&quot;async/await代码存在的问题&quot;&gt;&lt;/a&gt;async/await代码存在的问题&lt;/h2&gt;&lt;p&gt;async/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>高并发场景下StackExchange.Redis驱动的超时问题</title>
    <link href="https://loremipsumsharp.github.io/2020/04/25/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8BStackExchange.Redis%E9%A9%B1%E5%8A%A8%E7%9A%84%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://loremipsumsharp.github.io/2020/04/25/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8BStackExchange.Redis%E9%A9%B1%E5%8A%A8%E7%9A%84%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-25T05:40:09.000Z</published>
    <updated>2020-04-28T02:58:56.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>近期部门的大量微服务在做国际化改造。为了实现国际化需求，需要有一个支撑服务用于提供用户ip信息数据。由于是支撑服务，会产生大量调用，大概每分钟2000次的调用，为了进一步提供性能，该服务会把用户的ip信息缓存到redis以避免重复调用第三方接口获取ip数据。<br>上线前对该服务进行了压力测试，发现在高并发的场景下，会频繁发生<br><strong>StackExchange.Redis.RedisTimeoutException</strong>异常，这对于一个支撑服务来说是不可接受的。</p><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><p>使用grpc压力测试工具<a href="https://github.com/bojand/ghz" target="_blank" rel="noopener">ghz</a>模拟高并发场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ghz 192.168.1.44:43667 --insecure \</span><br><span class="line">--proto ..&#x2F;..&#x2F;proto&#x2F;FM.Region.Client&#x2F;Region.proto \</span><br><span class="line">--call Region.RegionSrv&#x2F;GetRegionInfoDetailByIp \</span><br><span class="line"> --concurrency 400 \</span><br><span class="line">-n 1200 \</span><br><span class="line">-D  .&#x2F;ip.json</span><br></pre></td></tr></table></figure><p>1200请求，400个并发，共3轮测试</p><p>测试ip数据集如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;27.220.195.252&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;32.213.120.200&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;58.88.5.142&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;99.107.218.202&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;126.179.177.51&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;75.179.58.40&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;92.243.129.145&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;179.240.146.239&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;54.99.209.135&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;116.125.57.197&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;104.243.227.11&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;65.175.113.237&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;92.160.105.28&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;51.189.156.232&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;101.136.19.162&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;128.78.227.70&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;123.139.77.54&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;172.234.209.119&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;187.172.248.233&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;28.8.211.1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;130.96.236.81&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;88.162.103.72&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;166.2.94.121&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;102.106.115.156&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;19.148.120.200&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;219.240.103.98&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;221.17.125.56&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;91.236.176.82&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;41.237.239.70&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;145.55.30.213&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;139.135.98.132&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;72.143.86.138&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;198.225.10.195&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;136.234.70.30&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;103.89.118.202&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;44.250.218.13&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;116.207.166.76&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;140.238.239.80&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;31.158.163.164&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;182.215.64.241&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;220.197.147.157&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;117.254.129.148&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;94.184.10.88&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;219.61.223.175&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;185.172.199.161&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;184.69.18.249&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;166.64.229.72&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;212.98.0.204&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;160.59.24.87&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;48.195.150.66&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;147.186.60.20&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;138.19.147.96&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;8.43.149.29&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;108.94.149.179&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;111.177.253.182&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;99.160.130.179&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;125.194.19.83&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;26.100.156.127&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;105.18.80.126&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;128.141.4.89&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;80.20.225.251&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;41.253.214.98&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;36.5.58.33&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;56.52.122.254&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;162.240.161.83&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;195.221.65.187&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;223.215.140.121&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;42.254.253.187&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;99.236.88.173&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;87.49.237.85&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;124.230.221.226&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;46.22.123.116&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;105.85.140.56&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;69.167.167.233&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;176.44.47.123&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;40.225.1.63&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;102.209.225.101&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;62.173.169.38&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;51.133.22.72&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;31.129.69.30&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;194.133.28.78&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;9.243.223.78&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;185.107.13.97&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;IP&quot;: &quot;155.131.137.219&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>测试输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">  Count:        1200</span><br><span class="line">  Total:        36.67 s</span><br><span class="line">  Slowest:      19.65 s</span><br><span class="line">  Fastest:      1.01 s</span><br><span class="line">  Average:      11.12 s</span><br><span class="line">  Requests&#x2F;sec: 32.72</span><br><span class="line"></span><br><span class="line">Response time histogram:</span><br><span class="line">  1011.354 [1]  |</span><br><span class="line">  2875.261 [8]  |∎</span><br><span class="line">  4739.167 [13] |∎</span><br><span class="line">  6603.074 [17] |∎∎</span><br><span class="line">  8466.981 [230]        |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  10330.887 [117]       |∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  12194.794 [440]       |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  14058.701 [172]       |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  15922.608 [145]       |∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  17786.514 [44]        |∎∎∎∎</span><br><span class="line">  19650.421 [7] |∎</span><br><span class="line"></span><br><span class="line">Latency distribution:</span><br><span class="line">  10%% in 8.15 s</span><br><span class="line">  25%% in 9.21 s</span><br><span class="line">  50%% in 11.17 s</span><br><span class="line">  75%% in 12.50 s</span><br><span class="line">  90%% in 14.51 s</span><br><span class="line">  95%% in 15.28 s</span><br><span class="line">  99%% in 17.24 s</span><br><span class="line"></span><br><span class="line">Status code distribution:</span><br><span class="line">  [OK]                 1194 responses</span><br><span class="line">  [DeadlineExceeded]   6 responses</span><br><span class="line"></span><br><span class="line">Error distribution:</span><br><span class="line">  [5]   rpc error: code &#x3D; DeadlineExceeded desc &#x3D; context deadline exceeded</span><br><span class="line">  [1]   rpc error: code &#x3D; DeadlineExceeded desc &#x3D; Deadline Exceeded</span><br></pre></td></tr></table></figure><p>测试输出提示请求超时，而且大量请求响应时间很不理想，查看日志发现StackExchange.Redis.RedisTimeoutException异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StackExchange.Redis.RedisTimeoutException: Timeout performing EVAL, inst: 5, queue: 1032, qu: 0, qs: 1032, qc: 0, wr: 0, wq: 0, in: 97489, ar: 0, clientName: , serverEndpoint: 192.168.1.44:43667, keyHashSlot: 693 (Please take a look at this article for some common client-side issues that can cause timeouts: http:\&#x2F;\&#x2F;stackexchange.github.io\&#x2F;StackExchange.Redis\&#x2F;Timeouts)\n   at StackExchange.Redis.ConnectionMultiplexer.ExecuteSyncImpl[T](Message message, ResultProcessor&#96;1 processor, ServerEndPoint server ...</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>根据<a href="https://github.com/StackExchange/StackExchange.Redis/blob/master/docs/Timeouts.md" target="_blank" rel="noopener">StackExchange.Redis官方文档</a>描述,在高并发场景下，当StackExchange.Redis的内部线程池无法满足并发要求的时候会去请求CLR的全局线程池，全局线程池的初始线程数量是根据CPU的核心数来确定的，当全局线程池的线程不够用的时候，会以500ms/per thread的速度往线程池里面添加新的线程，但这个速度在高并发场景下还是远远不够的，为此需要配置CLR线程池的最小线程数来满足高并发的场景。<br>在程序入口添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool.SetMinThreads(512, 100) &#x2F;&#x2F;worker最小线程数512,IOCP最小线程数100</span><br></pre></td></tr></table></figure><h2 id="问题验证"><a href="#问题验证" class="headerlink" title="问题验证"></a>问题验证</h2><p>配置最小线程数后再进行压力测试，测试输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Summary:</span><br><span class="line">  Count:        1200</span><br><span class="line">  Total:        2.66 s</span><br><span class="line">  Slowest:      2.15 s</span><br><span class="line">  Fastest:      1.99 ms</span><br><span class="line">  Average:      827.12 ms</span><br><span class="line">  Requests&#x2F;sec: 451.92</span><br><span class="line"></span><br><span class="line">Response time histogram:</span><br><span class="line">  1.987 [1]     |</span><br><span class="line">  216.449 [66]  |∎∎∎∎∎∎∎</span><br><span class="line">  430.911 [174] |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  645.373 [403] |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  859.835 [136] |∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  1074.297 [75] |∎∎∎∎∎∎∎</span><br><span class="line">  1288.759 [48] |∎∎∎∎∎</span><br><span class="line">  1503.221 [69] |∎∎∎∎∎∎∎</span><br><span class="line">  1717.683 [156]        |∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎</span><br><span class="line">  1932.145 [13] |∎</span><br><span class="line">  2146.607 [59] |∎∎∎∎∎∎</span><br><span class="line"></span><br><span class="line">Latency distribution:</span><br><span class="line">  10%% in 332.77 ms</span><br><span class="line">  25%% in 445.91 ms</span><br><span class="line">  50%% in 547.70 ms</span><br><span class="line">  75%% in 1.28 s</span><br><span class="line">  90%% in 1.68 s</span><br><span class="line">  95%% in 1.91 s</span><br><span class="line">  99%% in 2.11 s</span><br><span class="line"></span><br><span class="line">Status code distribution:</span><br><span class="line">  [OK]   1200 responses</span><br></pre></td></tr></table></figure><p>超时问题消失,并且响应时间大幅度减小</p><p>需要注意的是，如果机器配置不够（CPU跑满了)，再高并发场景下，仍然会出现超时问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;近期部门的大量微服务在做国际化改造。为了实现国际化需求，需要有一个支撑服务用于提供用户ip信息数据。由于是支撑服务，会产生大
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记线上的一次Mysql死锁问题分析</title>
    <link href="https://loremipsumsharp.github.io/2020/03/14/%E8%AE%B0%E7%BA%BF%E4%B8%8A%E7%9A%84%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://loremipsumsharp.github.io/2020/03/14/%E8%AE%B0%E7%BA%BF%E4%B8%8A%E7%9A%84%E4%B8%80%E6%AC%A1Mysql%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</id>
    <published>2020-03-14T02:10:39.000Z</published>
    <updated>2020-04-28T02:58:16.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>最近上线了叫做“F币”的功能，简单说下就是系统会根据用户每天在社区的活跃行为，计算每一个用户的活跃度，最后根据用户每天的总活跃度返还相应的“F币”给用户，用户得到F币之后可以在社区兑换不同的礼品,如下图所示：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/BF0B1ABB-F459-4343-BE90-5177FB6583D5.png" alt=""></p><p>在测试环境和仿真环境运行的好好的，但是上线之后经常接到用户反馈，需要多次点击才能完成领取。查看阿里云日志，提示数据库产生死锁，如下图所示：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/9DF85AF7-0840-4323-9B0C-613480533A45.png" alt=""></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>注意到这里有一排按钮，用户的每次点击，后台都会进行以下两个操作：</p><ol><li>更新用户余额（用户表）</li><li>生成流水记录 （用户流水记录）</li></ol><p>注：用户表和流水表存在主外键关系</p><p>以上的两个操作会放在同一个事务完成，并且由于Ef的SaveChanges并不会根据你代码执行的先后次序去更新数据库，当用户以很快的速度从左到右依次点击，存在以下可能：</p><p>T1:事务A插入流水，由于存在外键，会对user对应的行上S锁。</p><p>T2:事务B插入流水，由于存在外键，会对user对应的行上S锁。</p><p>T3:事务A更新User的余额，请求行记录的X锁，被B事务在T2的S锁阻塞</p><p>T4:事务B更新User的余额，请求行记录的X锁，被A事务在T1的S锁阻塞</p><p>至此死锁产生。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>用了一个比较简单+暴力的方法：领取接口直接上redis分布式锁。</p><h2 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h2><p>这个项目是使用DDD的思想进行开发的，自然而然地在ORM上面的选型使用了EntityFramework Code First,但是Code Firit在建表的时候会自做主张的在“多”端生成外键。对外键的使用，除开了一部分性能开销，就是上述的死锁问题，后续考虑把这部分重构为DbFirst。</p><p>另外值得一提的是，后来对这部逻辑做了压测，发现这部分代码在Sql Server跑是没问题的，因为Sql Server在插入子表的时候不会对父表记录上锁，而Mysql会对父表上锁,所以产生了死锁，天下果然没有免费午餐！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/7335582/dbcontext-savechanges-order-of-statement-execution" target="_blank" rel="noopener">DbContext SaveChanges Order of Statement Execution</a></p><p><a href="https://bugs.mysql.com/bug.php?id=48652" target="_blank" rel="noopener">Deadlock due to Foreign Key constraint</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;最近上线了叫做“F币”的功能，简单说下就是系统会根据用户每天在社区的活跃行为，计算每一个用户的活跃度，最后根据用户每天的总活
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>AspNetCore2.1升级到3.1时CORS相关配置的变更</title>
    <link href="https://loremipsumsharp.github.io/2020/02/27/AspNetCore2.1%E5%8D%87%E7%BA%A7%E5%88%B03.1%E6%97%B6CORS%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8F%98%E6%9B%B4/"/>
    <id>https://loremipsumsharp.github.io/2020/02/27/AspNetCore2.1%E5%8D%87%E7%BA%A7%E5%88%B03.1%E6%97%B6CORS%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8F%98%E6%9B%B4/</id>
    <published>2020-02-27T12:05:33.000Z</published>
    <updated>2020-04-28T02:57:21.278Z</updated>
    
    <content type="html"><![CDATA[<p>本周将公司的运营系统从AspNetCore2.1升级到了AspNetCore3.1,遇到了一些坑，这里记录以下</p><h2 id="2-1的相关CORS代码"><a href="#2-1的相关CORS代码" class="headerlink" title="2.1的相关CORS代码"></a>2.1的相关CORS代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public IServiceProvider ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        ... &#x2F;&#x2F; 省略</span><br><span class="line">        services.AddCors(option &#x3D;&gt; option.AddPolicy(&quot;corsPolicy&quot;, builders &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builders.AllowCredentials().AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod();</span><br><span class="line">        &#125;));</span><br><span class="line">        ... &#x2F;&#x2F; 省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory, IHostingEnvironment env)</span><br><span class="line">&#123;</span><br><span class="line">    ... &#x2F;&#x2F; 省略</span><br><span class="line">    app.UseCors(&quot;corsPolicy&quot;);</span><br><span class="line">     ... &#x2F;&#x2F; 省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这部分代码这3.1的服务中不加任何修改，启动时提示错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The CORS protocol does not allow specifying a wildcard (any) origin and credentials at the same time. Configure the CORS policy by listing individual origins if credentials needs to be supported.</span><br></pre></td></tr></table></figure><p>这是由于在2.1之后,AspNetCore出于安全考虑，做了更加严格的限制，在不AllowCredentials()与AllowAnyOrigin()。</p><p>假设现在站点A存在一个恶意脚本，而站点B存在一个比较的敏感的接口（如转账）。如果站点B作为服务端使用AllowCredentials()与AllowAnyOrigin()的同源配置，此时站点A可以直接调用站点B的敏感接口并发送凭证信息（如Cookie），那么将导致用户信息被窃取。</p><h2 id="3-1的相关CORS代码"><a href="#3-1的相关CORS代码" class="headerlink" title="3.1的相关CORS代码"></a>3.1的相关CORS代码</h2><h3 id="options1-显示声明允许跨域的origin"><a href="#options1-显示声明允许跨域的origin" class="headerlink" title="options1 显示声明允许跨域的origin"></a>options1 显示声明允许跨域的origin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddCors(option &#x3D;&gt; option.AddPolicy(&quot;corsPolicy&quot;, builders &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builders.WithOrigins(&quot;http:&#x2F;&#x2F;site.com&quot;).AllowAnyHeader().AllowAnyMethod().AllowCredentials();</span><br><span class="line">            &#125;));</span><br></pre></td></tr></table></figure><h3 id="options2-使用-SetIsOriginAllowed（可以起到与AllowAnyOriginu一样的效果）"><a href="#options2-使用-SetIsOriginAllowed（可以起到与AllowAnyOriginu一样的效果）" class="headerlink" title="options2 使用 SetIsOriginAllowed（可以起到与AllowAnyOriginu一样的效果）"></a>options2 使用 SetIsOriginAllowed（可以起到与AllowAnyOriginu一样的效果）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddCors(option &#x3D;&gt; option.AddPolicy(&quot;corsPolicy&quot;, builders &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builders.SetIsOriginAllowed(origin&#x3D;&gt;true).AllowAnyHeader().AllowAnyMethod().AllowCredentials(); &#x2F;&#x2F;SetIsOriginAllowed(origin&#x3D;&gt;true)允许所有origin</span><br><span class="line">            &#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本周将公司的运营系统从AspNetCore2.1升级到了AspNetCore3.1,遇到了一些坑，这里记录以下&lt;/p&gt;
&lt;h2 id=&quot;2-1的相关CORS代码&quot;&gt;&lt;a href=&quot;#2-1的相关CORS代码&quot; class=&quot;headerlink&quot; title=&quot;2.1的相
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>InnodDB中的Gap Locks与Next-key Locks</title>
    <link href="https://loremipsumsharp.github.io/2020/02/11/InnodDB%E4%B8%AD%E7%9A%84Gap%20Locks%E4%B8%8ENext-key%20Locks/"/>
    <id>https://loremipsumsharp.github.io/2020/02/11/InnodDB%E4%B8%AD%E7%9A%84Gap%20Locks%E4%B8%8ENext-key%20Locks/</id>
    <published>2020-02-11T13:12:33.000Z</published>
    <updated>2020-04-28T02:56:56.340Z</updated>
    
    <content type="html"><![CDATA[<p>为了理解Gap Locks与Next-key Locks首先必须了解InnodDB定义的四种隔离级别</p><h2 id="InnodDB的四种隔离级别"><a href="#InnodDB的四种隔离级别" class="headerlink" title="InnodDB的四种隔离级别"></a>InnodDB的四种隔离级别</h2><ol><li>Read uncommitted(未授权读取、读未提交)：如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。该隔离级别可以通过“排他写锁”实现。这样就避免了更新丢失，却可能出现脏读。也就是说事务B读取到了事务A未提交的数据。</li><li>Read committed（授权读取、读提交）： 读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。该隔离级别避免了脏读，但是却可能出现不可重复读。事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。</li><li>Repeatable read（可重复读取,MySQL默认隔离级别）： 可重复读是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，即使第二个事务对数据进行修改，第一个事务两次读到的的数据是一样的。这样就发生了在一个事务内两次读到的数据是一样的，因此称为是可重复读。读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务。这样避免了不可重复读取和脏读，但是有时可能出现幻象读。（读取数据的事务）这可以通过“共享读锁”和“排他写锁”实现。</li><li>Serializable（序列化）： 提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行。如果仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。序列化是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读。 </li></ol><h2 id="Gap-Locks"><a href="#Gap-Locks" class="headerlink" title="Gap Locks"></a>Gap Locks</h2><p>如下图所示：假设存在一个索引(Key,pk),那么当innodb在一事务中中对(-∞,(9,5)]追加Gap Locks后,如果其他事务尝试在索引记录中的任意一个Gap添加记录,该事务将会被阻塞<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/WeChat%20Screenshot_20200217021548.png" alt=""></p><h2 id="Next-key-Locks"><a href="#Next-key-Locks" class="headerlink" title="Next-key Locks"></a>Next-key Locks</h2><p>Next-key Locks = Gap Locks + index-record lock。<br>当在某一个事务中执行一个SELECT语句，Innodb会通过扫描相应的索引记录来找到生成一个ResultSet，这个时候被扫描到的索引记录都被被添加Next-key locks。<br>举个例子，假设现在存在一张表T，T的主键为ID，ID的可能值是10，11，13，20。<br>现在在一个事务中执行如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ID FROM T WHERE ID &gt;&#x3D;10 AND ID &lt;&#x3D; 20 FOR UPDATE;</span><br></pre></td></tr></table></figure><p>这个时候会产生的Next-key Locks如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(-∞, 10]</span><br><span class="line">(10, 11]</span><br><span class="line">(11, 13]</span><br><span class="line">(13, 20]</span><br><span class="line">(20, +∞)</span><br></pre></td></tr></table></figure><p>其他事务不能这个范围内将不能插入新的纪录（避免了幻读），也不能修改相应的记录（避免了不可重复读）</p><p>可见Next-key Locks与Gap Locks主要是为了满足Repeatable read的一致性要求。</p><p>另外值得注意的一点是，如果被扫描到的索引是一个唯一索引，且只有并且只有一笔记录，那么这个时候只会上index-record lock，因为这个时候其他事务产生了新的记录，也不会产生幻读。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了理解Gap Locks与Next-key Locks首先必须了解InnodDB定义的四种隔离级别&lt;/p&gt;
&lt;h2 id=&quot;InnodDB的四种隔离级别&quot;&gt;&lt;a href=&quot;#InnodDB的四种隔离级别&quot; class=&quot;headerlink&quot; title=&quot;InnodD
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven库配置阿里云加速</title>
    <link href="https://loremipsumsharp.github.io/2020/01/19/Maven%E5%BA%93%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F/"/>
    <id>https://loremipsumsharp.github.io/2020/01/19/Maven%E5%BA%93%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F/</id>
    <published>2020-01-19T08:30:20.000Z</published>
    <updated>2020-04-28T02:57:23.435Z</updated>
    
    <content type="html"><![CDATA[<p>由于国内的网络原因,通过maven拉取相关package的时候总是特别慢，极大的影响到工作效率。所幸的是阿里云提供了maven库的镜像服务，体验了一下，速度飞快。配置方法如下：</p><h2 id="Maven仓库配置阿里云加速"><a href="#Maven仓库配置阿里云加速" class="headerlink" title="Maven仓库配置阿里云加速"></a>Maven仓库配置阿里云加速</h2><ul><li>确定settings.xml配置文件位置<br>执行如下命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -X</span><br></pre></td></tr></table></figure><p>输入如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.....省略</span><br><span class="line">[DEBUG] Reading global settings from &#x2F;usr&#x2F;share&#x2F;maven&#x2F;conf&#x2F;settings.xml</span><br><span class="line">[DEBUG] Reading user settings from &#x2F;home&#x2F;abc&#x2F;.m2&#x2F;settings.xml</span><br><span class="line">[DEBUG] Reading global toolchains from &#x2F;usr&#x2F;share&#x2F;maven&#x2F;conf&#x2F;toolchains.xml</span><br><span class="line">[DEBUG] Reading user toolchains from &#x2F;home&#x2F;loremipsum&#x2F;.m2&#x2F;toolchains.xml</span><br><span class="line">[DEBUG] Using local repository at &#x2F;home&#x2F;abc&#x2F;.m2&#x2F;repository</span><br><span class="line"></span><br><span class="line">.....省略</span><br></pre></td></tr></table></figure><ul><li>修改settings.xml,修改mirrors xml结点下的相关配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;!-- mirror</span><br><span class="line">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="line">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="line">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="line">     |</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;mirrorId&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;repositoryId&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Human Readable Name for this Mirror.&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;my.repository.com&#x2F;repo&#x2F;path&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-public&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun public&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;public&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-central&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun central&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;central&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-jcenter&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun jcenter&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;jcenter&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;jcenter&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-spring&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun spring&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;spring&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;spring&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-spring-milestones&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun spring milestones&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;spring-milestones&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;spring&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-spring-plugin&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun spring plugin&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;spring-plugin&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;spring-plugin&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-gradle-plugin&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun gradle plugin&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;gradle-plugin&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;gradle-plugin&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-google&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun google&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;google&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;google&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-grails-core&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun grails core&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;grails-core&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;grails-core&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure><h2 id="防坑："><a href="#防坑：" class="headerlink" title="防坑："></a>防坑：</h2><p>大部分的包阿里云的maven镜像库都有，一部分比较新的库上面是没有的，如springboot，阿里云上面的版本只是到了2.2.0，实际2.2.4都已经出来了，同步不是很及时。目前我都一些没有的库做了降级处理，后续再看看怎么处理这个问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于国内的网络原因,通过maven拉取相关package的时候总是特别慢，极大的影响到工作效率。所幸的是阿里云提供了maven库的镜像服务，体验了一下，速度飞快。配置方法如下：&lt;/p&gt;
&lt;h2 id=&quot;Maven仓库配置阿里云加速&quot;&gt;&lt;a href=&quot;#Maven仓库配置阿
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kafka连接超时问题的本质</title>
    <link href="https://loremipsumsharp.github.io/2020/01/15/Kafka%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>https://loremipsumsharp.github.io/2020/01/15/Kafka%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E7%9A%84%E6%9C%AC%E8%B4%A8/</id>
    <published>2020-01-15T08:30:20.000Z</published>
    <updated>2020-04-30T04:44:13.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题的背景"><a href="#问题的背景" class="headerlink" title="问题的背景"></a>问题的背景</h2><p>前段时间开发环境搭建了一套kafka环境，搭建完成后通过客户端去连接kafka时，当produer调用send的时候程序都会直接hang住，提示连接超时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.kafka.common.errors.TimeoutException: </span><br><span class="line">Expiring 1 record(s) for demo-topic-0:120000 ms has passed since batch creation</span><br></pre></td></tr></table></figure><p>接着我试了一下调用producer的partitionsFor方法，可以正常执行。同样的，当consumer执行poll方法时，程序也会直接卡死。</p><h2 id="问题的本质"><a href="#问题的本质" class="headerlink" title="问题的本质"></a>问题的本质</h2><p>producer是通过leader broker往partition写入数据,当producer希望写入数据的时候会向kafka请求当前的leader broker信息，这个时候如果kafka的leader broker的host信息如果和客户端不在同一个网段就会出现上述的超时现象，这也就可以解释为什么partitionsFor方法可以正常执行(不涉及到leader broker的通信)，但是send方法(涉及到leader broker的通信)执行失败。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>配置ADVERTISED_HOST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash-4.4# vi $KAFKA_HOME&#x2F;config&#x2F;server.properties</span><br></pre></td></tr></table></figure><p>这里我的配置是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;127.0.0.1:9092</span><br></pre></td></tr></table></figure><p>由于是使用docker部署，客户端和服务端不在同一台机器上，所以我需要把这个配置改为与客户端同一个网段的</p><h2 id="问题验证"><a href="#问题验证" class="headerlink" title="问题验证"></a>问题验证</h2><p>当ADVERTISED_HOST为PLAINTEXT://127.0.0.1:9092可以看到partitionsFor返回的leader broker信息为下图所示：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/CD584EBE-9DDF-4bbb-AF15-7970A064979A.png" alt=""></p><p>修改ADVERTISED_HOST后，返回信息如下：<br><img src="https://raw.githubusercontent.com/LoremipsumSharp/Images/master/img/53CA72B0-F276-4ef7-B524-18C970ED3443.png" alt=""></p><p>没有再次出现连接超时的问题</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://rmoff.net/2018/08/02/kafka-listeners-explained/" target="_blank" rel="noopener">kafka-listeners-explained</a></p><p><a href="https://docs.cloudera.com/runtime/7.1.0/kafka-managing/topics/kafka-manage-client-broker-comp.html" target="_blank" rel="noopener">Client and broker compatibility across Kafka versions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题的背景&quot;&gt;&lt;a href=&quot;#问题的背景&quot; class=&quot;headerlink&quot; title=&quot;问题的背景&quot;&gt;&lt;/a&gt;问题的背景&lt;/h2&gt;&lt;p&gt;前段时间开发环境搭建了一套kafka环境，搭建完成后通过客户端去连接kafka时，当produer调用send的时候
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>NetCore应用配置Auto Core Dump</title>
    <link href="https://loremipsumsharp.github.io/2020/01/09/NetCore%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AEAuto%20Core%20Dump/"/>
    <id>https://loremipsumsharp.github.io/2020/01/09/NetCore%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AEAuto%20Core%20Dump/</id>
    <published>2020-01-09T12:40:12.000Z</published>
    <updated>2020-04-28T02:55:59.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>前阵子线上用户标签服务频繁出现内存泄漏问题，早上服务运行的好好的，经常一到半夜服务就挂掉。由于事发半夜，很难加以人工干预，而早上dump出来的文件参考价值很低，迫切需要一种自动化的手段让服务在宕掉的时候能够保存完整的案发现场。事实上，.NET CORE可以支持这一需求，不过默认是不开启的，需要加以配置。</p><h2 id="Auto-Core-Dump配置方法"><a href="#Auto-Core-Dump配置方法" class="headerlink" title="Auto Core Dump配置方法"></a>Auto Core Dump配置方法</h2><p>以下内容是我原封不动从dotnet/rumtime这个仓库拷贝过来的：</p><p>Environment variables supported:</p><ul><li><code>COMPlus_DbgEnableMiniDump</code>: if set to “1”, enables this core dump generation. The default is NOT to generate a dump.</li><li><code>COMPlus_DbgMiniDumpType</code>: See below. Default is “2” MiniDumpWithPrivateReadWriteMemory.</li><li><code>COMPlus_DbgMiniDumpName</code>: if set, use as the template to create the dump path and file name. The pid can be placed in the name with %d. The default is <em>/tmp/coredump.%d</em>.</li><li><code>COMPlus_CreateDumpDiagnostics</code>: if set to “1”, enables the <em>createdump</em> utilities diagnostic messages (TRACE macro).</li></ul><p>COMPlus_DbgMiniDumpType values:</p><table><thead><tr><th>Value</th><th align="center">Minidump Enum</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td align="center">MiniDumpNormal</td><td>Include just the information necessary to capture stack traces for all existing threads in a process. Limited GC heap memory and information.</td></tr><tr><td>2</td><td align="center">MiniDumpWithPrivateReadWriteMemory (default)</td><td>Includes the GC heaps and information necessary to capture stack traces for all existing threads in a process.</td></tr><tr><td>3</td><td align="center">MiniDumpFilterTriage</td><td>Include just the information necessary to capture stack traces for all existing threads in a process. Limited GC heap memory and information.</td></tr><tr><td>4</td><td align="center">MiniDumpWithFullMemory</td><td>Include all accessible memory in the process. The raw memory data is included at the end, so that the initial structures can be mapped directly without the raw memory information. This option can result in a very large file.</td></tr></tbody></table><p>根据以上内容，可以在Dockerfile或者docker-compose文件加入以下环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENV COMPlus_DbgEnableMiniDump&#x3D;&quot;1&quot;  # enables core dump generation</span><br><span class="line">ENV COMPlus_DbgMiniDumpName&#x3D;&quot;&#x2F;diagnostics&#x2F;dumps&#x2F;coredump_%d&quot; # core dump文件位置，一般是一个挂在在宿主机的目录</span><br><span class="line">ENV COMPlus_DbgMiniDumpType&#x3D;&quot;4&quot; # 建议选择4，也就是full dump，保存的“现场”更加完整，但文件也会非常大</span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>在一个可以被调用的接口加入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Environment.FailFast()</span><br></pre></td></tr></table></figure><p>这个方法可以让应用直接挂掉,挂掉后观察相应的挂载目录有无生成dump文件</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dotnet/runtime/blob/8497763bbfa70455e6f08ed7aa345d43db1d22d7/docs/design/coreclr/botr/xplat-minidump-generation.md" target="_blank" rel="noopener">xplat-minidump-generation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;前阵子线上用户标签服务频繁出现内存泄漏问题，早上服务运行的好好的，经常一到半夜服务就挂掉。由于事发半夜，很难加以人工干预，而
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
